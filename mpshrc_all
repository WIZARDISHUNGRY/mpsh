# mpshrc_all 
#
# runs for any instance of mpsh


# job handlers:
setenv handler-t="at"
setenv handler-q="batch-submit"
setenv handler-w="xterm -e (cat) &"

# These use `cat` because the remote shell is sh or bash.
setenv handler-a="rsh a31 cd (pwd) ';' `cat`"
setenv handler-p="rsh pi0 cd (pwd) ';' `cat`"


# Here is a "misuse" of the handler feature. The "command text"
# doesn't actually have to be a command...
# Evaluate the "command" as a dc calculation:
setenv handler-d="dc"
# Send the "command" to the X Windows buffer:
setenv handler-b="xcb -s 0"

# alias env variables:
# This gives behaviour similar to bash's "!$" with "$!".
# Using "text" vs "parsed" gives different results if that last word
# is a wildcard or env variable, etc.
#setenv !="!!.text | sed 's/.* //'"
setenv !="!!.parsed | sed 's/.* //'"

# $x reads the X Windows buffer.
setenv x="!xcb -p 0"

setenv YY="!date +%Y-%m-%d"
setenv CWD="!pwd"


# Internal mpsh settings:

# Show history & cd history substitutions
setenv mpsh-history=1
setenv mpsh-cdhistory=1

# Max error reporting
setenv mpsh-error-level=3

# Adjust history display formats as desired:
setenv mpsh-hist-disp=nc
setenv mpsh-hist-disp-l=ndxuec

# Uncomment for bash style jobs display:
#setenv mpsh-jobs-disp=nfRc
#setenv mpsh-jobs-disp-l=nfpRc


# prompt
setenv mpsh-prompt="!echo (date '+%M') "(hostname)" 'mpsh% '"


# aliases
alias F="fg %-"
alias M="! | more"
alias "?=!.parsed"


# macros
macro ~/=$HOME/


